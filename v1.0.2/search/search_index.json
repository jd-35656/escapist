{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Escapist: Simplify Jinja2 Template Rendering","text":"<p>Escapist is a lightweight Python tool designed to render Jinja2 templates using JSON or dict data and flexible environment settings. It can be used both as a CLI for quick template rendering tasks and as a Python library for programmatic integration.</p> <p>For detailed usage and documentation, visit: Escapist Documentation</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Customizable Jinja2 environment: Configure block delimiters, autoescaping, whitespace trimming, and more through JSON or dict settings.</li> <li>Supports JSON data: Provide template data via JSON files or Python dictionaries.</li> <li>CLI &amp; API: Use via command line or import as a Python library.</li> <li>Batch rendering: Render multiple templates in one command.</li> <li>Cross-platform: Works on Windows, macOS, and Linux.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install Escapist, run:</p> <pre><code>pipx install escapist\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#command-line-interface-cli","title":"Command-Line Interface (CLI)","text":"<p>Escapist provides simple commands to render Jinja2 templates with JSON data and custom settings.</p>"},{"location":"#render-a-single-template","title":"Render a Single Template","text":"<pre><code>escapist render TEMPLATE_PATH \\\n  --data DATA_JSON_FILE \\\n  --settings SETTINGS_JSON_FILE \\\n  --output OUTPUT_FILE_PATH\n</code></pre> <ul> <li><code>TEMPLATE_PATH</code>: Path to your Jinja2 template file.</li> <li><code>--data</code>: (Optional) Path to a JSON file containing data for rendering.</li> <li><code>--settings</code>: (Optional) Path to a JSON file with Jinja environment settings.</li> <li><code>--output</code>: (Optional) Path to save the rendered output. If omitted, output is printed to stdout.</li> </ul>"},{"location":"#render-multiple-templates-in-batch","title":"Render Multiple Templates in Batch","text":"<pre><code>escapist batch TEMPLATE_DIR \\\n  --pattern '*.html' \\\n  --data DATA_JSON_FILE \\\n  --settings SETTINGS_JSON_FILE \\\n  --output-dir OUTPUT_DIRECTORY \\\n  --force\n</code></pre> <ul> <li><code>TEMPLATE_DIR</code>: Directory containing your templates.</li> <li><code>--pattern</code>: (Optional) File pattern to match templates, e.g., <code>*.html</code>.</li> <li><code>--data</code>: (Optional) JSON data file for all templates.</li> <li><code>--settings</code>: (Optional) Jinja environment settings file.</li> <li><code>--output-dir</code>: Directory to save rendered templates.</li> <li><code>--force</code>: (Optional) Overwrite existing output files.</li> </ul>"},{"location":"#python-library-usage","title":"Python Library Usage","text":"<p>You can also use Escapist as a Python library for programmatic rendering.</p> <pre><code>from escapist import Escapist\n\n# Initialize renderer with optional settings\nrenderer = Escapist(settings=\"path/to/settings.json\")\n\n# Load template (file path or template string)\nrenderer.load_template(\"path/to/template.jinja\")\n\n# Render with data (dict or path to JSON file)\noutput = renderer.render(data={\"name\": \"Alice\", \"version\": \"1.0.0\"})\n\nprint(output)\n</code></pre>"},{"location":"#settings-format","title":"Settings Format","text":"<p>Escapist supports flexible Jinja2 environment configuration via JSON settings files. Below is an example structure of a settings JSON file you can use to customize the rendering environment:</p> <pre><code>{\n  \"environment\": {\n    \"block_start_string\": \"{%\",\n    \"block_end_string\": \"%}\",\n    \"variable_start_string\": \"{{\",\n    \"variable_end_string\": \"}}\",\n    \"comment_start_string\": \"{#\",\n    \"comment_end_string\": \"#}\",\n    \"line_statement_prefix\": null,\n    \"line_comment_prefix\": null,\n    \"trim_blocks\": false,\n    \"lstrip_blocks\": false,\n    \"newline_sequence\": \"\\n\",\n    \"keep_trailing_newline\": false\n  },\n  \"globals\": {\n    \"app_name\": \"Escapist\",\n    \"version\": \"0.0.1\"\n  },\n  \"autoescape\": {\n    \"enabled_extensions\": [\"html\", \"htm\", \"xml\"],\n    \"disabled_extensions\": [],\n    \"default_for_string\": true,\n    \"default\": false\n  },\n  \"escape_sequences\": {\n    \"&gt;\": \"&amp;gt;\",\n    \"&lt;\": \"&amp;lt;\",\n    \"&amp;\": \"&amp;amp;\",\n    \"\\\"\": \"&amp;quot;\",\n    \"'\": \"&amp;#39;\"\n  },\n  \"treat_missing_variable_as_missing\": true\n}\n</code></pre> <ul> <li>environment: Configures Jinja2 delimiters, whitespace trimming, newline behavior, and other environment options.</li> <li>globals: Defines default variables accessible in templates; if a variable is missing from provided data, the value here is used.</li> <li>autoescape: Controls autoescaping of output based on file extensions. Can also be a boolean (<code>true</code> or <code>false</code>). Default is <code>false</code>. Enable to prevent HTML/XSS injection.</li> <li>escape_sequences: Maps characters to their escaped representations (e.g., replacing <code>&gt;</code> with <code>&amp;gt;</code>).</li> <li>treat_missing_variable_as_missing: Determines how missing variables in the template data are handled (e.g., treat as missing instead of erroring).</li> </ul>"},{"location":"#license","title":"License","text":"<p><code>escapist</code> is distributed under the terms of the MIT license.</p>"},{"location":"#contact","title":"Contact","text":"<p>Created by Jitesh Sahani (JD) Email: jitesh.sahani@outlook.com</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p> <p>Note: This project uses Towncrier to manage the changelog automatically. Do not manually edit or commit changes to this file.</p>"},{"location":"changelog/#v101-2025-10-17","title":"v1.0.1 - 2025-10-17","text":"<p>No significant changes.</p>"},{"location":"changelog/#v100-2025-10-17","title":"v1.0.0 - 2025-10-17","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Initial project scaffolding with core, CLI, tests, docs, configs, and CI setup (#1)</li> <li>Core and CLI implementations with supporting exceptions and utilities. (#3)</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated tests to cover new core and CLI features. (#3)</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>improve GitHub Actions workflows for caching and release versioning, update changelog. (#3)</li> </ul>"},{"location":"installation/","title":"\u2705 Installation Guide","text":""},{"location":"installation/#recommended-using-pipx","title":"\ud83d\ude80 Recommended: Using pipx","text":"<p>Why pipx?</p> <p><code>pipx</code> installs Python CLI tools in isolated environments, keeping your global Python setup clean while making the command available system-wide.</p>"},{"location":"installation/#install-pipx-if-not-already-installed","title":"\ud83d\udce6 Install pipx (if not already installed)","text":"macOSUbuntu / DebianWindowsOther Linux <pre><code>brew install pipx\npipx ensurepath\n</code></pre> <pre><code>sudo apt update\nsudo apt install pipx\npipx ensurepath\nsudo pipx ensurepath --global  # Optional: enable global usage\n</code></pre> <pre><code># Using Scoop\nscoop install pipx\n\n# Or using pip\npython -m pip install --user pipx\npython -m pipx ensurepath\n</code></pre> <pre><code>python -m pip install --user pipx\npython -m pipx ensurepath\n</code></pre>"},{"location":"installation/#install-escapist-with-pipx","title":"\u2705 Install Escapist with pipx","text":"<p>Install Command</p> <pre><code>pipx install escapist\n</code></pre>"},{"location":"installation/#verify-installation","title":"\ud83d\udd0d Verify Installation","text":"<p>Run the following to confirm it was installed correctly:</p> <pre><code>escapist --version\n</code></pre>"},{"location":"installation/#alternative-using-pip","title":"\ud83d\udc0d Alternative: Using pip","text":"<p>Not using pipx?</p> <p>You can also install Escapist using pip, though it's strongly recommended to use a virtual environment.</p> <pre><code>pip install escapist\n</code></pre> <p>Use a virtual environment</p> <p>Avoid installing globally with pip. Instead:</p> <pre><code>python -m venv venv\nsource venv/bin/activate  # Windows: venv\\Scripts\\activate\npip install escapist\n</code></pre>"},{"location":"installation/#upgrading","title":"\ud83d\udd04 Upgrading","text":"With pipxWith pip <pre><code>pipx upgrade escapist\n</code></pre> <pre><code>pip install --upgrade escapist\n</code></pre>"},{"location":"installation/#uninstalling","title":"\ud83e\uddf9 Uninstalling","text":"With pipxWith pip <pre><code>pipx uninstall escapist\n</code></pre> <pre><code>pip uninstall escapist\n</code></pre>"},{"location":"installation/#system-requirements","title":"\ud83d\udda5\ufe0f System Requirements","text":"<p>Requirements</p> <ul> <li>Python: 3.8 or higher</li> <li>Operating System: Windows, macOS, Linux</li> <li>Dependencies: Automatically installed during setup</li> </ul>"},{"location":"development/contributing/","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions from everyone \u2014 whether you're fixing a typo, improving tests, or building new features!</p> <p>This guide will walk you through setting up the project locally and contributing with confidence. Let\u2019s build something great together! \ud83d\ude80</p> <p>\u2b50\ufe0f Star the repo to show your support: https://github.com/jd-35656/resumake</p>"},{"location":"development/contributing/#how-to-contribute","title":"\ud83d\udccc How to Contribute","text":"<ol> <li>Fork the repository</li> <li>Clone your fork locally</li> <li>Create a new branch for your feature or fix</li> <li>Make your changes</li> <li>Run tests and checks</li> <li>Push to your fork</li> <li>Open a Pull Request</li> </ol> <p>Please use Conventional Commits for commit messages.</p>"},{"location":"development/contributing/#development-environment-setup","title":"\ud83e\uddea Development Environment Setup","text":""},{"location":"development/contributing/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/jd-35656/resumake.git\ncd resumake\n</code></pre>"},{"location":"development/contributing/#2-install-development-tooling","title":"2. Install Development Tooling","text":"<p>We use nox to automate development tasks:</p> <pre><code>pipx install nox\n</code></pre>"},{"location":"development/contributing/#3-create-a-virtual-environment","title":"3. Create a Virtual Environment","text":"<pre><code>nox -s develop-3.13\n</code></pre> <p>This sets up a virtual environment in <code>.nox/develop-3.13</code>.</p>"},{"location":"development/contributing/#4-activate-the-environment","title":"4. Activate the Environment","text":"<pre><code>source .nox/develop-3-13/bin/activate\n</code></pre>"},{"location":"development/contributing/#5-deactivate-the-environment","title":"5. Deactivate the Environment","text":"<pre><code>deactivate\n</code></pre> <p>Using a Different Python Version?</p> <p>Run <code>nox -l</code> to see available Python versions (e.g., 3.9\u20133.13) and run:</p> <pre><code>nox -s develop-3.12\n</code></pre>"},{"location":"development/contributing/#ide-setup","title":"\ud83e\udde0 IDE Setup","text":"VS CodePyCharm <ol> <li>Open the project folder</li> <li>Press <code>Ctrl+Shift+P</code> \u2192 \u201cPython: Select Interpreter\u201d</li> <li>Select <code>.nox/develop-3-13/bin/python</code></li> <li> <p>Recommended Extensions:</p> <ul> <li>Python</li> <li>Pylance</li> <li>Ruff</li> </ul> </li> </ol> <ol> <li>File \u2192 Settings \u2192 Project \u2192 Python Interpreter</li> <li>Add: <code>.nox/develop-3-13/bin/python</code></li> <li>Apply and OK</li> </ol>"},{"location":"development/contributing/#verify-your-setup","title":"\u2705 Verify Your Setup","text":"<p>Make sure everything is working correctly:</p> <pre><code>nox            # Run tests, lint, and type checks\nnox -s tests   # Just run tests\nnox -s lint    # Run formatter and linter\nnox -s check   # Lint + type check\n</code></pre>"},{"location":"development/contributing/#development-workflow","title":"\ud83d\udee0\ufe0f Development Workflow","text":"<ol> <li>Make your changes</li> <li>Run <code>nox</code> to ensure all checks pass</li> <li>Add a changelog entry (if needed)</li> <li>Commit using Conventional Commits</li> <li>Push to your fork</li> <li>Open a PR on GitHub</li> </ol>"},{"location":"development/contributing/#changelog-entries","title":"\ud83d\udcdd Changelog Entries","text":"<p>For user-facing changes, add a changelog fragment using towncrier:</p> <pre><code>changelog.d/&lt;issue_number&gt;.&lt;type&gt;.rst\n</code></pre> <p>Types: <code>added</code>, <code>changed</code>, <code>deprecated</code>, <code>removed</code>, <code>fixed</code>, <code>security</code></p> <p>Example:</p> <pre><code>changelog.d/123.added.rst     # Adds a new feature\n</code></pre>"},{"location":"development/contributing/#code-standards","title":"\ud83e\uddf9 Code Standards","text":"<p>Style Guide</p> <ul> <li>Line length: 121 characters</li> <li>Code formatting: ruff</li> <li>Type hints: Required for public APIs</li> <li>Docstrings: Google-style</li> <li>Commits: Conventional Commits</li> </ul>"},{"location":"development/contributing/#project-structure","title":"\ud83d\uddc2\ufe0f Project Structure","text":"<pre><code>src/resumake/\n\u251c\u2500\u2500 __main__.py         # CLI entry\n\u251c\u2500\u2500 __version__.py      # Auto-generated\n\u251c\u2500\u2500 cli/\n\u2502   \u2514\u2500\u2500 app.py          # Typer app\n\u2514\u2500\u2500 core/\n    \u2514\u2500\u2500 __init__.py\n\ntests/\n\u251c\u2500\u2500 test_cli.py\n\u251c\u2500\u2500 test_app.py\n\u251c\u2500\u2500 test_main.py\n\u251c\u2500\u2500 test_version.py\n\u2514\u2500\u2500 test_package.py\n</code></pre>"},{"location":"development/contributing/#key-files","title":"\ud83d\udcc4 Key Files","text":"<p>Important Files</p> <ul> <li><code>noxfile.py</code> \u2013 Dev automation (lint, tests, etc.)</li> <li><code>pyproject.toml</code> \u2013 Dependencies and tool configs</li> <li><code>docs/</code> \u2013 MkDocs documentation</li> <li><code>.github/workflows/</code> \u2013 CI/CD automation</li> <li><code>changelog.d/</code> \u2013 Changelog fragments</li> </ul>"},{"location":"development/contributing/#troubleshooting","title":"\ud83d\udee0\ufe0f Troubleshooting","text":"<p>Common Problems &amp; Fixes</p> Issue Solution Tests failing <code>nox -s tests -- -v</code> Lint errors <code>nox -s lint</code> (auto-fixable with Ruff) Type errors <code>nox -s typecheck</code> Coverage too low Add more tests! CI build fails Check GitHub Actions logs"},{"location":"development/contributing/#thank-you","title":"\ud83d\ude4c Thank You","text":"<p>Your contributions make this project better! Even small improvements make a big impact. Feel free to open an issue or start a discussion.</p> <p>\u2b50\ufe0f Star the project: https://github.com/jd-35656/resumake</p>"},{"location":"development/releasing/","title":"\ud83d\ude80 Releasing","text":"<p>Personal Reference</p> <p>Quick reference for future releases</p>"},{"location":"development/releasing/#quick-release-guide","title":"\ud83d\udcdd Quick Release Guide","text":"\u2705 GitHub Actions (Recommended)\ud83c\udff7\ufe0f PR Labels <ol> <li>Go to GitHub Actions \u2192 \"Create Release\" workflow</li> <li>Click \"Run workflow\"</li> <li>Select release type and run</li> </ol> <ol> <li>Add <code>release:patch</code>, <code>release:minor</code>, or <code>release:major</code> label to a merged PR</li> <li>Release workflow triggers automatically</li> </ol>"},{"location":"development/releasing/#release-types","title":"\ud83e\udde9 Release Types","text":"Label Example Purpose <code>release:patch</code> <code>1.0.0</code> \u2192 <code>1.0.1</code> Bug fixes <code>release:minor</code> <code>1.0.0</code> \u2192 <code>1.1.0</code> Backward-compatible features <code>release:major</code> <code>1.0.0</code> \u2192 <code>2.0.0</code> Breaking changes"},{"location":"development/releasing/#what-happens-automatically","title":"\u2699\ufe0f What Happens Automatically","text":"<ol> <li>\ud83d\udd22 Version calculation \u2013 Based on label or workflow input</li> <li>\ud83d\udcdd Changelog generation \u2013 Using <code>towncrier</code> from <code>changelog.d/</code></li> <li>\ud83c\udf3f Git operations \u2013 Commits version bump &amp; tags release</li> <li>\ud83d\udc19 GitHub Release \u2013 Drafted with generated changelog notes</li> <li>\ud83d\udce6 PyPI publishing \u2013 Uploads release to PyPI</li> <li>\ud83c\udf10 Documentation deployment \u2013 Builds &amp; updates docs via GitHub Pages</li> </ol>"},{"location":"development/releasing/#before-releasing","title":"\u2705 Before Releasing","text":"<p>Prerequisites</p> <ul> <li>\u2705 All CI checks pass</li> <li>\u2705 Changelog fragments exist \u2014 or PR has <code>no-changelog</code> label</li> <li>\u2705 <code>main</code> branch is up to date and clean</li> </ul>"},{"location":"development/releasing/#if-something-goes-wrong","title":"\ud83e\uddef If Something Goes Wrong","text":"<p>Emergency Response</p> \ud83e\ude79 Quick Fix\ud83d\udd25 Major Issues <ul> <li>\ud83d\udd12 Yank release from PyPI (prevents new installs)</li> <li>\ud83d\udcdd Add a warning to the GitHub release notes</li> </ul> <ul> <li>\u274c Delete release and corresponding Git tag</li> <li>\ud83d\udee0\ufe0f Create a hotfix release with patch bump</li> <li>\u23ea Revert commits if necessary</li> </ul>"},{"location":"development/releasing/#important-files","title":"\ud83d\udcc2 Important Files","text":"File / Path Purpose <code>changelog.d/*.md</code> Changelog fragments (<code>.feature</code>, <code>.bugfix</code>, etc.) <code>.github/workflows/release.yml</code> Release automation workflow <code>.github/workflows/publish.yml</code> PyPI publishing &amp; deployment <code>nox -s changelog</code> Generate changelog <code>nox -s build</code> Build Python distribution <code>nox -s docs_deploy</code> Deploy documentation"},{"location":"development/releasing/#secrets-required","title":"\ud83d\udd10 Secrets Required","text":"<p>GitHub Repository Secrets</p> <ul> <li><code>PYPI_API_TOKEN</code> \u2013 PyPI publish access</li> <li><code>PAT_TOKEN</code> \u2013 GitHub token with release permissions</li> </ul>"},{"location":"development/releasing/#troubleshooting","title":"\ud83e\uddf0 Troubleshooting","text":"<p>Common Issues</p> Problem Solution \u274c Release failed Check GitHub Actions logs for errors \ud83d\udce6 PyPI upload failed Check version uniqueness and API token \ud83d\udcc4 Changelog empty Ensure valid fragments exist in <code>changelog.d/</code> \ud83c\udf10 Docs not updating Check <code>gh-pages</code> branch or deploy workflow status"},{"location":"development/testing/","title":"\ud83e\uddea Testing","text":""},{"location":"development/testing/#available-nox-sessions","title":"\ud83d\udccb Available Nox Sessions","text":"<p>List Available Sessions</p> <p>Run this to list all available Nox sessions:</p> <pre><code>nox -l\n</code></pre> <p>Example output:</p> <pre><code>Sessions defined in noxfile.py:\n\n- develop-3.8     # Create development environment\n- develop-3.9\n- develop-3.10\n- develop-3.11\n- develop-3.12\n- develop-3.13\n* tests-3.8       # Run tests with coverage\n* tests-3.9\n* tests-3.10\n* tests-3.11\n* tests-3.12\n* tests-3.13\n- lint            # Code formatting and linting\n- typecheck       # Type checking with mypy\n* check           # Run lint + typecheck\n- build           # Build package distributions\n- changelog       # Generate changelog\n- docs_serve      # Serve documentation locally\n- docs_deploy     # Deploy documentation to GitHub Pages\n\nSessions marked with * are selected; - are available but skipped.\n</code></pre>"},{"location":"development/testing/#running-tests","title":"\u2705 Running Tests","text":"Basic UsageCustom Arguments <pre><code># Run tests across all supported Python versions\nnox -s tests\n\n# Run tests on a specific Python version\nnox -s tests-3.13\n\n# Run the default sessions (tests + code checks)\nnox\n</code></pre> <pre><code># Verbose output\nnox -s tests-3.13 -- -v\n\n# Run tests matching a pattern\nnox -s tests-3.13 -- -k test_version\n\n# Run a specific test file\nnox -s tests-3.13 -- tests/test_cli.py\n\n# Use short traceback\nnox -s tests-3.13 -- --tb=short\n\n# Generate HTML coverage report\nnox -s tests-3.13 -- --cov-report=html\n\n# Combine multiple arguments\nnox -s tests-3.13 -- -v -k test_cli --tb=short\n</code></pre> <p>Common <code>pytest</code> Arguments</p> <pre><code>-v                  # Verbose output\n-s                  # Show print() output\n-x                  # Stop after first failure\n-k EXPRESSION       # Filter tests by substring\n--tb=short|long|no  # Control traceback format\n--lf                # Run only last failed tests\n--ff                # Run failed tests first\n</code></pre>"},{"location":"development/testing/#code-quality-checks","title":"\ud83e\uddf9 Code Quality Checks","text":"LintingType CheckingCombined <pre><code># Run all linting checks\nnox -s lint\n\n# Includes:\n# - ruff (formatting/linting)\n# - codespell (spell checks)\n# - pre-commit hooks\n</code></pre> <pre><code># Type check using mypy\nnox -s typecheck\n\n# With arguments\nnox -s typecheck -- --strict\nnox -s typecheck -- src/resumake/cli/\n</code></pre> <pre><code># Run both linting and type checking\nnox -s check\n\n# Run all default quality checks and tests\nnox\n</code></pre>"},{"location":"development/testing/#coverage-reports","title":"\ud83d\udcc8 Coverage Reports","text":"<p>Coverage Summary</p> <p>Test sessions include coverage reporting:</p> <ul> <li>\ud83d\udcca Terminal Output: shows % covered and missing lines</li> <li>\ud83d\udcc1 HTML Report: viewable with <code>--cov-report=html</code></li> <li>\u2705 Minimum Required: 90%</li> <li>\ud83d\udfe2 Current: 100% coverage</li> </ul>"},{"location":"development/testing/#documentation-development","title":"\ud83d\udcda Documentation Development","text":"<p>Serve Docs Locally</p> <pre><code>nox -s docs_serve\n</code></pre> <ul> <li>Starts a local server with live reload</li> <li>Available at: http://127.0.0.1:8000</li> </ul>"},{"location":"development/testing/#requirements","title":"\u2699\ufe0f Requirements","text":"<p>Testing Requirements</p> <ul> <li>Python: 3.8 or newer (up to 3.13 supported)</li> <li>Coverage Threshold: 90% minimum</li> <li>Test Layout:<ul> <li>Files: <code>tests/test_*.py</code></li> <li>Classes: <code>Test*</code> format</li> </ul> </li> </ul>"},{"location":"reference/api/","title":"API Reference","text":""},{"location":"reference/api/#core-api","title":"Core API","text":"<p>Main API entry point for the Escapist library.</p> <p>This module exposes the <code>Escapist</code> class, which serves as the primary interface for rendering templates based on user-defined settings.</p> Usage <pre><code>from escapist import Escapist\n\nrenderer = Escapist(settings=\"path/to/settings.yaml\")\n</code></pre>"},{"location":"reference/api/#escapist-classes","title":"Classes","text":""},{"location":"reference/api/#escapist.Escapist","title":"Escapist","text":"<pre><code>Escapist(\n    settings: dict[str, Any] | str | Path | None = None,\n)\n</code></pre> <p>A class for rendering Jinja2 templates from various sources with configurable settings.</p> <p>The environment is configured and created on initialization. The template can then be loaded via a public method and rendered using a separate public method.</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>dict[str, Any] | str | Path | None</code> <p>The Jinja environment settings, which can be a dict,         a JSON string, or a file path to a JSON file.</p> <code>None</code> <p>Raises:</p> Type Description <code>DataLoadError</code> <p>If settings loading fails.</p>"},{"location":"reference/api/#escapist.Escapist-attributes","title":"Attributes","text":""},{"location":"reference/api/#escapist.Escapist.is_template_loaded","title":"is_template_loaded  <code>property</code>","text":"<pre><code>is_template_loaded: bool\n</code></pre> <p>Check if a template has been loaded.</p>"},{"location":"reference/api/#escapist.Escapist.template_source","title":"template_source  <code>property</code>","text":"<pre><code>template_source: str | None\n</code></pre> <p>Get the source of the currently loaded template.</p>"},{"location":"reference/api/#escapist.Escapist-functions","title":"Functions","text":""},{"location":"reference/api/#escapist.Escapist.load_template","title":"load_template","text":"<pre><code>load_template(template_source: str | Path) -&gt; None\n</code></pre> <p>Loads and compiles the Jinja template based on its source.</p> <p>Parameters:</p> Name Type Description Default <code>template_source</code> <code>str | Path</code> <p>The template source, either a file path or a string.</p> required <p>Raises:</p> Type Description <code>InvalidTemplateError</code> <p>If the source path is invalid.</p> <code>InvalidTemplateSyntaxError</code> <p>If the the jinja syntax is wrong.</p> <code>DataLoadError</code> <p>If settings loading fails.</p>"},{"location":"reference/api/#escapist.Escapist.render","title":"render","text":"<pre><code>render(\n    data: dict[str, Any] | str | Path | None = None,\n    output_file: str | Path | None = None,\n) -&gt; str\n</code></pre> <p>Renders the currently loaded template with the provided data.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict[str, Any] | str | Path | None</code> <p>The data to use for rendering, which can be a dict,   a JSON string, or a file path to a JSON file.</p> <code>None</code> <code>output_file</code> <code>str | Path | None</code> <p>Optional path to a file where the rendered output will be saved.</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>The rendered template as a string.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If no template has been loaded before rendering.</p> <code>DataLoadError</code> <p>If data loading from JSON fails.</p> <code>FileWriteError</code> <p>If fails to write rendered template to file</p> <code>UndefinedError</code> <p>If missing any variables</p>"},{"location":"reference/api/#exceptions","title":"Exceptions","text":"<p>Exception definitions for the Escapist library.</p> <p>This module defines a set of custom exceptions used throughout the Escapist template rendering and data processing system. All exceptions inherit from <code>EscapistError</code>, allowing for broad or fine-grained error handling.</p> Usage <p>You can catch specific exceptions to handle known issues gracefully:</p> <pre><code>from escapist.exceptions import (\n    EscapistError,\n    DataLoadError,\n    FileWriteError,\n    InvalidTemplateError,\n    InvalidTemplateSyntaxError,\n)\n\ntry:\n    ....\nexcept DataLoadError as e:\n    print(f\"Failed to load data: {e}\")\nexcept FileWriteError as e:\n    print(f\"Could not write to output file: {e}\")\nexcept InvalidTemplateSyntaxError as e:\n    print(f\"Template syntax error: {e}\")\nexcept EscapistError as e:\n    # Generic catch-all for any Escapist-related error\n    print(f\"An unknown Escapist error occurred: {e}\")\n</code></pre> <p>These exceptions are designed to clearly communicate the source of errors during common operations like data loading, template parsing, and file output.</p>"},{"location":"reference/api/#escapist.exceptions-classes","title":"Classes","text":""},{"location":"reference/api/#escapist.exceptions.EscapistError","title":"EscapistError","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all Escapist-related errors.</p> <p>Catching this exception will handle any error raised by the library, allowing for broad error handling when the specific cause is not important.</p>"},{"location":"reference/api/#escapist.exceptions.DataLoadError","title":"DataLoadError","text":"<p>               Bases: <code>EscapistError</code></p> <p>Raised when an error occurs during data loading or parsing.</p> <p>This includes issues with loading JSON from a file or string, or encountering an unsupported data type for the input.</p>"},{"location":"reference/api/#escapist.exceptions.FileWriteError","title":"FileWriteError","text":"<p>               Bases: <code>EscapistError</code></p> <p>Raised when an error occurs while writing rendered output to a file.</p> <p>This may happen due to issues such as insufficient file system permissions, invalid file paths, missing directories, or other I/O-related errors that prevent successful writing of the output content.</p>"},{"location":"reference/api/#escapist.exceptions.InvalidTemplateError","title":"InvalidTemplateError","text":"<p>               Bases: <code>EscapistError</code></p> <p>Raised when a template path is invalid.</p> <p>This exception is raised when the template source is a path that exists but is not a file (e.g., it is a directory), or when a template string is ambiguous with a file path.</p>"},{"location":"reference/api/#escapist.exceptions.InvalidTemplateSyntaxError","title":"InvalidTemplateSyntaxError","text":"<p>               Bases: <code>EscapistError</code></p> <p>Raised when a template contains invalid Jinja syntax.</p> <p>This exception is triggered when the Jinja2 engine encounters a syntax error while parsing the template string or file. Common causes include unmatched tags, invalid expressions, or unsupported Jinja constructs.</p>"},{"location":"reference/cli/","title":"CLI References","text":""},{"location":"reference/cli/#escapist","title":"<code>escapist</code>","text":"<pre><code>Usage: escapist [OPTIONS] COMMAND [ARGS]...\n\n  Jinja2 template rendering CLI.\n\n  Render templates with JSON data and custom settings.\n\nOptions:\n  --version      Show the version and exit.\n  -v, --verbose  Enable verbose output for debugging\n  --help         Show this message and exit.\n\nCommands:\n  batch   Render multiple templates in batch.\n  render  Render a Jinja2 template.\n</code></pre>"},{"location":"reference/cli/#escapist-batch","title":"<code>escapist batch</code>","text":"<pre><code>Usage: escapist batch [OPTIONS] TEMPLATE_DIR\n\n  Render multiple templates in batch.\n\n  TEMPLATE_DIR is the path to the folder containing templates.\n\nOptions:\n  -p, --pattern TEXT          File pattern to match (e.g., '*.html', '*.xml')\n  -d, --data FILE             Path to JSON data file\n  -s, --settings FILE         Path to JSON settings file\n  -o, --output-dir PATH       Output directory  [required]\n  -e, --output-file-ext TEXT  Output file extension (e.g., 'html')\n  -f, --force                 Overwrite output files if they exist\n  --help                      Show this message and exit.\n</code></pre>"},{"location":"reference/cli/#escapist-render","title":"<code>escapist render</code>","text":"<pre><code>Usage: escapist render [OPTIONS] TEMPLATE\n\n  Render a Jinja2 template.\n\n  TEMPLATE is the path to the template file to be processed.\n\nOptions:\n  -d, --data FILE      Path to JSON data file.\n  -s, --settings FILE  Path to JSON settings file.\n  -o, --output PATH    Output file path (prints to stdout if not specified).\n  -f, --force          Overwrite output file if it exists.\n  --help               Show this message and exit.\n</code></pre>"}]}